
   <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
     <channel>
       <title>crypto on Catousify</title>
       <link>http://zeroload.github.io/ctf/categories/crypto/</link>
       <description>Recent content in crypto on Catousify</description>
       <generator>Hugo -- gohugo.io</generator>
       <language>en-us</language>
       <copyright>Copyright &amp;copy; 2019 - kiror0</copyright>
       <lastBuildDate>Sun, 04 Feb 2018 16:16:15 +0000</lastBuildDate>
       
           <atom:link href="http://zeroload.github.io/ctf/categories/crypto/index.xml" rel="self" type="application/rss+xml" />
       
       
       <item>
         <title>SharifCTF 2018 - fHash Writeup</title>
         <link>http://zeroload.github.io/ctf/posts/sharifctf-2018-fhash-writeup/</link>
         <pubDate>Sun, 04 Feb 2018 16:16:15 +0000</pubDate>
         
         <guid>http://zeroload.github.io/ctf/posts/sharifctf-2018-fhash-writeup/</guid>
         <description>&lt;blockquote&gt;
&lt;p&gt;fHash.py (&lt;a href=&#34;https://pastebin.com/tEw7BPtX&#34;&gt;https://pastebin.com/tEw7BPtX&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://a.safe.moe/MceKg&#34; alt=&#34;&#34;&gt; Given a custom hash, the task is to create some kind of collision in order to get the flag. At this moment, I don&#39;t know what&#39;s this second-preimage thing, but the task is clear enough somehow we should get the collision with restriction &lt;code&gt;hl1 != hl2&lt;/code&gt; and &lt;code&gt;hr1 != hr2&lt;/code&gt; and &lt;code&gt;M1 != M2&lt;/code&gt;. &lt;code&gt;hl&lt;/code&gt; and &lt;code&gt;hr&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; be 2 bytes and &lt;code&gt;M&lt;/code&gt; &lt;strong&gt;must&lt;/strong&gt; be 4 bytes. First, analyze the algorithm used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; md5

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(h, m):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; md5(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;round&lt;/span&gt;(hl, m, hr):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; foo(hl, m), foo(hr, m)

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fHash&lt;/span&gt;(hl, hr, M):
    message &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; list(map(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;join, zip(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;[iter(M)] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)))
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; message:
        hl, hr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; round(hl, m, hr)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (hl, hr)

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;__main__&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(fHash(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7575&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;A8A8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;7368617269666374&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;M&lt;/code&gt; length must be the power of 4 so that it can be sliced into parts by 2 bytes. As for example &lt;code&gt;7368617269666374&lt;/code&gt; =&amp;gt; &lt;code&gt;7368&lt;/code&gt;,&lt;code&gt;6172&lt;/code&gt;,&lt;code&gt;6966&lt;/code&gt;, and &lt;code&gt;6374&lt;/code&gt;. After that, sliced &lt;code&gt;M&lt;/code&gt; get to concatenated with &lt;code&gt;hl&lt;/code&gt; or &lt;code&gt;hr&lt;/code&gt; then the first 2 bytes of md5sum from the concatenated string will be used for next round &lt;code&gt;hl&lt;/code&gt; or &lt;code&gt;hr&lt;/code&gt;, repeated until last sliced part of &lt;code&gt;M&lt;/code&gt;. For example, &lt;code&gt;7575&lt;/code&gt; and &lt;code&gt;7368&lt;/code&gt; =&amp;gt; &lt;code&gt;md5sum(75757368)[:4]&lt;/code&gt; =&amp;gt; &lt;code&gt;dcd0&lt;/code&gt; =&amp;gt; &lt;code&gt;dcd0&lt;/code&gt; and &lt;code&gt;6172&lt;/code&gt; =&amp;gt; &lt;code&gt;md5sum(dcd06172)[:4]&lt;/code&gt; =&amp;gt; and so on.. In diagram &lt;img src=&#34;https://a.safe.moe/gVUMe.png&#34; alt=&#34;&#34;&gt; Attack. Yes, Attacc boi. The flaw is in &lt;code&gt;foo(h, m)&lt;/code&gt; where the return only the first 2 bytes of &lt;code&gt;md5sum(h + m)&lt;/code&gt;. At first, my approach was to get all the bytes from &lt;code&gt;hl&lt;/code&gt;, &lt;code&gt;hr&lt;/code&gt;, and &lt;code&gt;M&lt;/code&gt; to be different. That&#39;s where the exhausting part, until I just realized, &lt;strong&gt;all of the bytes doesn&#39;t needs to be different&lt;/strong&gt; :|. Side story aside, the idea for this is to change the bytes used first round and the return for foo must be same as use in &lt;code&gt;hl1&lt;/code&gt;, &lt;code&gt;hr1&lt;/code&gt;, and &lt;code&gt;M1&lt;/code&gt;. I did this with a crude bruteforce way,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; hashlib &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; md5
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; sys

&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(h, m):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; md5(h&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; m&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;encode(&lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;utf-8&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;))&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;hexdigest()[:&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]

alpha &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;0123456789ABCDEF&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# alpha = &amp;#39;0123456789abcdef&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex1 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex2 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex3 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex4 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex5 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex6 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex7 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex8 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                                m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  hex1 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex2 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex3 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex4
                                hl &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hex5 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex6 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex7 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex8
                                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; foo(hl, m) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;dcd0&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;:
                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex9 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                                        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex10 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                                            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex11 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                                                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; hex12 &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; alpha:
                                                    hr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; hex9 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex10 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex11 &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; hex12
                                                    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; foo(hr, m) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;a6ea&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&lt;/span&gt;:
                                                        &lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt; hl, m, hr
                                                        sys&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exit(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I put break at the end just to output one result, in fact there are dozens of result if this didn&#39;t stopped. It doesn&#39;t need to take long to run this bruteforce script, the output,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;45ED 0007 E19F
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In diagram, &lt;img src=&#34;https://a.safe.moe/N08T6.png&#34; alt=&#34;&#34;&gt;
The final answer, &lt;code&gt;hl2 = 45ED&lt;/code&gt;, &lt;code&gt;hr2 = E19F&lt;/code&gt;, &lt;code&gt;M2 = 0007617269666374&lt;/code&gt;.
&lt;img src=&#34;https://a.safe.moe/qBlm0.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
       </item>
       
     </channel>
   </rss>
